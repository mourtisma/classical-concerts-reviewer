//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "example_sea_orm_with_relation_example_many_to_many"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, Eq, DeriveActiveModel)]
#[sea_orm(table_name = "example_sea_orm_with_relation_example_many_to_many")]
pub struct Model {
    pub example_sea_orm_with_relation_id: Uuid,
    pub example_many_to_many_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    ExampleSeaOrmWithRelationId,
    ExampleManyToManyId,
}

impl ColumnTrait for Column {
    type EntityName = Entity;

    fn def(&self) -> ColumnDef {
        match self {
            Self::ExampleSeaOrmWithRelationId => ColumnType::Uuid.def(),
            Self::ExampleManyToManyId => ColumnType::Uuid.def(),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    ExampleSeaOrmWithRelationId,
    ExampleManyToManyId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (Uuid, Uuid);

    fn auto_increment() -> bool {
        false
    }
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::example_many_to_many::Entity",
        from = "Column::ExampleManyToManyId",
        to = "super::example_many_to_many::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ExampleManyToMany,
    #[sea_orm(
        belongs_to = "super::example_sea_orm_with_relation::Entity",
        from = "Column::ExampleSeaOrmWithRelationId",
        to = "super::example_sea_orm_with_relation::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ExampleSeaOrmWithRelation,
}

impl Related<super::example_many_to_many::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExampleManyToMany.def()
    }
}

impl Related<super::example_sea_orm_with_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExampleSeaOrmWithRelation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
